name: Setup Terraform State

on:
  # workflow_run:
  #   workflows: ["Build and Push Image"]
  #   types:
  #     - completed

  workflow_dispatch:

jobs:
  setup-state-management:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write
      statuses: write
      actions: read
      contents: read
    env:
      BUCKET_NAME: my-tfv1-state
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials for State Management
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.CI_ROLE }}
          aws-region: eu-west-1 

      - name: Set up Terraform for State Management
        uses: hashicorp/setup-terraform@v1
      
      - name: Check if S3 Bucket Exists
        id: check-bucket
        run: |
          if aws s3 ls "s3://${{ env.BUCKET_NAME }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "S3 Bucket does not exist"
            echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
          else
            echo "S3 Bucket exists"
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Prepare Backend Config for State Management
        if: env.BUCKET_EXISTS == 'false'
        run: |
          mv ./tf_state_management/backend.tf ./tf_state_management/backend.tf.backup || true
        working-directory: .
      
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init for State Management if S3 Bucket doesn't exist
        if: env.BUCKET_EXISTS == 'false'
        run: terraform init
        working-directory: ./tf_state_management
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan for State Management
        id: plan
        if: env.BUCKET_EXISTS == 'false'
        run: terraform plan -no-color -input=false
        working-directory: ./tf_state_management 
        continue-on-error: true

      - name: Terraform Apply for State Management
        if: env.BUCKET_EXISTS == 'false'
        run: terraform apply -auto-approve
        working-directory: ./tf_state_management

      - name: Capture S3 Bucket Name
        if: env.BUCKET_EXISTS == 'false'
        run: |
          output=$(terraform output -json)
          echo "BUCKET_NAME=$(echo "$output" | jq -r '.bucket_name.value')" >> $GITHUB_ENV
        working-directory: ./tf_state_management
      
      - name: Restore Backend Config for State Management
        if: env.BUCKET_EXISTS == 'false'
        run: |
          mv ./state_management/backend.tf.backup ./state_management/backend.tf || true
        working-directory: .
  